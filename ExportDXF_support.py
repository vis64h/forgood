#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Dec 07, 2022 06:12:15 PM CST  platform: Windows NT

#    Dec 07, 2022 05:55:16 PM CST  platform: Windows NT

import sys
import os
from tkinter import messagebox, filedialog
from inp_module import INP_Module
import ezdxf
import math

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    global inp_file_path, node_file_path
    global INP_Module, COORDINATES, NODES, VERTICES, LINES,VALVES,PUMPS
    INP_Module = INP_Module()
    COORDINATES = {}
    NODES = {}
    VERTICES = {}
    LINES = {}
    VALVES={}
    PUMPS={}
    w.Digits.set("1")

# 載入INP資訊


def loadFile_INP(inp_file):
    nodeJunctionNameID, nodeJunctionElevations, nodeJunctionBaseDemands, nodePatternNameID, BinLinkPipeNameID, BinLinkFromNode, BinLinkToNode, BinLinkPipeLengths, BinLinkPipeDiameters, BinLinkPipeRoughness, BinLinkPipeMinorLoss, nodewithCoords, x, y, vertx, verty \
        ,BinLinkValveNameID, BinLinkValveDiameters, BinLinkValveType, BinLinkValveSetting,BinLinkValveMinorLoss,BinLinkPumpNameID, BinLinkPumpPatterns, BinLinkPumpCurveNameID, BinLinkPumpPower,BinLinkPumpSpeed,linkNameID= INP_Module.getBinInfo(
        inp_file)
    
                        
    # print("-----------------------------------")
    print("COORDINATES")
    for i in range(len(nodewithCoords)):
        COORDINATES[nodewithCoords[i]] = (x[i], y[i])
        # print(nodewithCoords[i], x[i], y[i])

    for i in range(len(nodeJunctionNameID)):
        NODES[nodeJunctionNameID[i]] = {'ELEV': nodeJunctionElevations[i],
                                        'DEMAND': nodeJunctionBaseDemands[i], 'COORDINATES': COORDINATES[nodeJunctionNameID[i]]}
    # print("-----------------------------------")
    print("VERTICES")
    try:
        # print(len(vertx),len(verty),len(BinLinkPipeNameID))
        for i in range(len(BinLinkPipeNameID)):
            points = []
            for j in range(len(vertx[i])):
                points.append((vertx[i][j], verty[i][j]))
            VERTICES[BinLinkPipeNameID[i]] = points
            # print(i,len(VERTICES[BinLinkPipeNameID[i]]))
            # print("-------")
    except Exception as e:
        print("VERTICES Error ",e)
    

    print("PIPE")
    for i in range(len(BinLinkPipeNameID)):
        if len(VERTICES[BinLinkPipeNameID[i]]) == 0:
            # line
            # Length      	Diameter    	Roughness   	MinorLoss   	Status
            LINES[BinLinkPipeNameID[i]] = {'ID':BinLinkPipeNameID[i],'LENGTH': BinLinkPipeLengths[i], 'DIAMETER': BinLinkPipeDiameters[i], 'ROUGHNESS': BinLinkPipeRoughness[i], 'MINORLOSS': BinLinkPipeMinorLoss[i], 'COORDINATES':
                                           (COORDINATES[BinLinkFromNode[i]], COORDINATES[BinLinkToNode[i]])}
        else:
            points = VERTICES[BinLinkPipeNameID[i]]
            points.insert(
                0, COORDINATES[BinLinkFromNode[i]])
            points.append(COORDINATES[BinLinkToNode[i]])
            LINES[BinLinkPipeNameID[i]] = {'ID':BinLinkPipeNameID[i],'LENGTH': BinLinkPipeLengths[i], 'DIAMETER': str(
                BinLinkPipeDiameters[i]), 'ROUGHNESS': BinLinkPipeRoughness[i], 'MINORLOSS': BinLinkPipeMinorLoss[i], 'COORDINATES': points}
            
    try:
        print("VALVE")
        for i in range(len(BinLinkValveNameID)):
            points = []
            for j in range(len(linkNameID)):        
                if BinLinkValveNameID[i]==linkNameID[j]:
                    points.append(COORDINATES[BinLinkFromNode[j]])
                    points.append(COORDINATES[BinLinkToNode[j]])
                    # print(BinLinkValveNameID[i],BinLinkValveDiameters[i],BinLinkValveType[i],BinLinkValveSetting[i],BinLinkValveMinorLoss[i],points)
                    # Diameter    	Type	Setting     	MinorLoss
                    # VALVES[BinLinkValveNameID[i]] = {'ID':BinLinkValveNameID[i],'Diameter': BinLinkValveDiameters[i], 'Type': BinLinkValveType[i], 'Setting': BinLinkValveSetting[i], 'MinorLoss': BinLinkValveMinorLoss[i], 'COORDINATES': points}
                    # print(VALVES)
                    VALVE_ID=BinLinkValveNameID[i]
                    DIAMETER=BinLinkValveDiameters[i]
                    TYPE=BinLinkValveType[i]
                    SETTING=BinLinkValveSetting[i]
                    MINORLOSS=BinLinkValveMinorLoss[i]
                    if VALVE_ID in VALVES:
                        VALVES[VALVE_ID]['ID'] = VALVE_ID
                        VALVES[VALVE_ID]['DIAMETER'] = DIAMETER
                        VALVES[VALVE_ID]['TYPE'] = TYPE
                        VALVES[VALVE_ID]['SETTING'] = SETTING
                        VALVES[VALVE_ID]['MINORLOSS'] = MINORLOSS
                        VALVES[VALVE_ID]['COORDINATES'] = points
                    else:
                        VALVES[VALVE_ID] = {'ID':VALVE_ID,
                            'DIAMETER': DIAMETER, 'TYPE': TYPE, 'SETTING': SETTING, 'MINORLOSS': MINORLOSS, 'COORDINATES': points}
                    break
                   
        # print(len(VALVES))
        # for i in range(len(VALVES)):
        #     print(VALVES[i])
    except Exception as e:
        print("VALVE Error",e)
    # print("")
    try:
        print("PUMP")
        for i in range(len(BinLinkPumpNameID)):
            points = []
            for j in range(len(linkNameID)):        
                if BinLinkPumpNameID[i]==linkNameID[j]:
                    points.append(COORDINATES[BinLinkFromNode[j]])
                    points.append(COORDINATES[BinLinkToNode[j]])
                    PUMP_ID=BinLinkPumpNameID[i]
                    POWER=BinLinkPumpPower[i]
                    HEAD=BinLinkPumpCurveNameID[i]
                    SPEED=BinLinkPumpSpeed[i]
                    PATTERN=BinLinkPumpPatterns[i]
                    
                    # print('ID',BinLinkPumpNameID[i])
                    # print('POWER',BinLinkPumpPower[i])
                    # print('HEAD',BinLinkPumpCurveNameID[i])
                    # print('SPEED',BinLinkPumpSpeed[i])
                    # print('PATTERN',BinLinkPumpPatterns[i])
                    # print('COORDINATES',points)
                    
                    if PUMP_ID in PUMPS:
                        PUMPS[PUMP_ID]['ID'] = PUMP_ID
                        PUMPS[PUMP_ID]['POWER'] = POWER
                        PUMPS[PUMP_ID]['HEAD'] = HEAD
                        PUMPS[PUMP_ID]['SPEED'] = SPEED
                        PUMPS[PUMP_ID]['PATTERN'] = PATTERN
                        PUMPS[PUMP_ID]['COORDINATES'] = points
                    else:
                        PUMPS[PUMP_ID] = {'ID':PUMP_ID,
                            'POWER': POWER, 'HEAD': HEAD, 'SPEED': SPEED, 'PATTERN': PATTERN, 'COORDINATES': points}
                    break
        
        # for i in range(len(PUMPS)):
        #     print(PUMPS[i])
    except Exception as e:
        print("PUMP Error",e)
    
    print("Over")
    #多了VALVE部分
    # linkNameID.append(self.mm[0])
    # BinLinkValveNameID.append(self.mm[0])
    # BinLinkFromNode.append(self.mm[1])
    # BinLinkToNode.append(self.mm[2])
    # BinLinkValveDiameters.append(float(self.mm[3]))
    # BinLinkValveType.append(self.mm[4])
    # BinLinkValveSetting.append(float(self.mm[5]))
    # BinLinkValveMinorLoss.append(float(self.mm[6]))
    # BinLinkValveDescription.append(desc_)
    
    #PUMP部分
    # linkNameID.append(self.mm[0])
    # BinLinkPumpNameID.append(self.mm[0])
    # BinLinkFromNode.append(self.mm[1])
    # BinLinkToNode.append(self.mm[2])
    
    
    

# 選擇INP檔案路徑


def chooseINP():
    print('ExportDXF_support.chooseINP')
    inp_file_path = filedialog.askopenfilename(parent=root, initialdir=os.getcwd(
    ), filetypes=(("INP file", "*.inp"), ("all files", "*.*")))
    if not inp_file_path:
        print('file path is empty')
        return
    else:
        w.File_INP.set(inp_file_path)
        print(inp_file_path)

# 選擇NODE檔案路徑


def chooseNode():
    print('ExportDXF_support.chooseNode')
    node_file_path = filedialog.askopenfilename(
        parent=root, filetypes=(("NODE file", "*.txt"), ("all files", "*.*")))
    # node_file_path = filedialog.askopenfilename(parent=root, initialdir=os.getcwd(), filetypes=(("NODE file", "*.txt"), ("all files", "*.*")))
    if not node_file_path:
        print('file path is empty')
        return
    else:
        w.File_NODE.set(node_file_path)
        print(node_file_path)

# 選擇PIPE檔案路徑


def choosePIPE():
    print('ExportDXF_support.choosePIPE')
    pipe_file_path = filedialog.askopenfilename(
        parent=root, filetypes=(("PIPE file", "*.txt"), ("all files", "*.*")))
    # pipe_file_path = filedialog.askopenfilename(parent=root, initialdir=os.getcwd(), filetypes=(("PIPE file", "*.txt"), ("all files", "*.*")))
    if not pipe_file_path:
        print('file path is empty')
        return
    else:
        w.File_PIPE.set(pipe_file_path)
        print(pipe_file_path)


def loadData():
    COORDINATES = None
    NODES = None
    VERTICES = None
    LINES = None
    COORDINATES = {}
    NODES = {}
    VERTICES = {}
    LINES = {}

    try:
        loadFile_INP(w.File_INP.get())
        loadFile_Node(w.File_NODE.get())
        print("loadFile_Node Over")
        loadFile_Link(w.File_PIPE.get())
        print("loadFile_Link Over")
        # 管線的所有屬性
        # [PIPES];ID,Node1,Node2,Length,Diameter,Roughness,MinorLoss,Flow,Velocity,Unit Headloss,Friction Factor,Reaction Rate,Quality,Status
        value_list = ['ID','FLOW', 'LENGTH', 'DIAMETER', 'ROUGHNESS','BULK_COEFF','WALL_COEFF','MINORLOSS', 'VELOCITY',
                      'UNIT_HEADLOSS', 'FRICTION_FACTOR', 'REACTION_RATE', 'QUALITY', 'STATUS']        
                        
        w.combox_TopLeft.configure(values=value_list)
        w.combox_TopRight.configure(values=value_list)
        w.combox_BottomLeft.configure(values=value_list)
        w.combox_BottomRight.configure(values=value_list)
        w.combox_TopLeft.current(1)
        w.combox_TopRight.current(3)
        w.combox_BottomLeft.current(2)
        w.combox_BottomRight.current(0)

        messagebox.showinfo("提醒訊息", "載入成功!!!")
    except Exception as e:
        print(e)
        messagebox.showinfo("錯誤訊息", "載入失敗!!!")

# 匯出DFX檔


def exportDXF():
    # print(w.Top_Left_Item.get(), w.Top_Right_Item.get(),
    #           w.Bottom_Left_Item.get(), w.Bottom_Right_Item.get(), w.Digits.get())
    # return
    dxf_file_path = filedialog.asksaveasfile(parent=root, initialfile='export.dxf',
                                             defaultextension=".dxf",
                                             filetypes=(("DXF file", "*.dxf"), ("all files", "*.*")))

    # dxf_file_path = filedialog.asksaveasfile(parent=root, initialdir=os.getcwd(), initialfile='export.dxf',
    #                                          defaultextension=".dxf",
    #                                          filetypes=(("DXF file", "*.dxf"), ("all files", "*.*")))
    # files = [('All Files', '*.*'),
    #          ('Python Files', '*.py'),
    #          ('Text Document', '*.txt')]
    # dxf_file_path = filedialog.asksaveasfile(
    #     filetypes=files, defaultextension=files)

    if not dxf_file_path:
        messagebox.showinfo("提醒訊息", "沒有選擇存檔檔名!!!")
        return
    else:
        print(dxf_file_path.name)
    # return
    print('ExportDXF_support.loadData')
    doc = ezdxf.new(setup=True)  # setup required line types
    # Getting the modelspace of a DXF document:
    msp = doc.modelspace()
    # Getting a paperspace layout by the name as shown in the tab of a CAD application:
    psp = doc.layout("Layout1")
    doc.layers.add(name="NODES", color=ezdxf.colors.RED)
    attribs = {"layer": "NODES"}

    layer_color = 1
    radius = 0.2
    for item in NODES.items():
        # print(item[0], item[1])
        # print(item[0], item[1]['COORDINATES']
        #       [0], item[1]['COORDINATES'][1])
        xt = float(item[1]['COORDINATES'][0])-3
        yt = float(item[1]['COORDINATES'][1])+3
        msp.add_circle(item[1]['COORDINATES'], radius,
                       dxfattribs=attribs)
        msp.add_text(item[1]['DEMAND'], dxfattribs={'layer': 'DEMAND', 'color': ezdxf.colors.BLUE}).set_pos(
            (xt, yt), align='TOP_CENTER')
        msp.add_text(item[1]['ELEV'], dxfattribs={'layer': 'ELEV', 'color': ezdxf.colors.BLUE}).set_pos(
            (xt-4, yt+3), align='TOP_CENTER')
        msp.add_text(item[1]['HEAD'], dxfattribs={'layer': 'HEAD', 'color': ezdxf.colors.BLUE}).set_pos(
            (xt, yt+6), align='TOP_CENTER')
        msp.add_text(item[1]['PRESSURE'], dxfattribs={'layer': 'PRESSURE', 'color': ezdxf.colors.BLUE}).set_pos(
            (xt-4, yt+9), align='TOP_CENTER')
        msp.add_text(item[1]['QUALITY'], dxfattribs={'layer': 'NODE_QUALITY', 'color': ezdxf.colors.BLUE}).set_pos(
            (xt, yt+12), align='TOP_CENTER')
        
        msp.add_text(item[1]['ID'], dxfattribs={'layer': 'NODE_ID', 'color': ezdxf.colors.BLUE}).set_pos(
            (xt+3, yt+12), align='TOP_CENTER')

    print('PUMPS')
    for item in PUMPS.values():
        msp.add_lwpolyline(item['COORDINATES'],
                           dxfattribs={'layer': 'PUMPS', 'color': ezdxf.colors.RED})
        
        # 存放所有x,y座標
        x_list = []
        y_list = []
        for point in item['COORDINATES']:
            # print(type(point),point)
            x_list.append(point[0])
            y_list.append(point[1])
        mean_x=sum(x_list)/len(x_list)
        mean_y=sum(y_list)/len(y_list)
        
        msp.add_text(item['ID'], dxfattribs={'layer': 'PUMP_ID', 'color': ezdxf.colors.BLUE}).set_pos((mean_x, mean_y), align='TOP_CENTER')
        
    print('VALVES')
    for item in VALVES.values():
        msp.add_lwpolyline(item['COORDINATES'],
                           dxfattribs={'layer': 'VALVES', 'color': ezdxf.colors.RED})
        # 存放所有x,y座標
        x_list = []
        y_list = []
        for point in item['COORDINATES']:
            # print(type(point),point)
            x_list.append(point[0])
            y_list.append(point[1])
        mean_x=sum(x_list)/len(x_list)
        mean_y=sum(y_list)/len(y_list)
        msp.add_text(item['ID'], dxfattribs={'layer': 'VALVE_ID', 'color': ezdxf.colors.BLUE}).set_pos((mean_x, mean_y), align='TOP_CENTER')
    
    print('LINES')
    for item in LINES.values():
        msp.add_lwpolyline(item['COORDINATES'],
                           dxfattribs={'layer': 'LINKS', 'color': 7})

        # 存放所有x,y座標
        x_list = []
        y_list = []
        for point in item['COORDINATES']:
            # print(type(point),point)
            x_list.append(point[0])
            y_list.append(point[1])

        mean_xt = 0.0
        mean_yt = 0.0
        yt = 0.0

        rotate_angle = 0
        idx = 0
        # 計算文字要旋轉的角度
        if len(x_list) == 2:
            rotate_angle = calAngle(
                x_list[0], y_list[0], x_list[1], y_list[1])
            mean_xt = (x_list[0] + x_list[1])/2.0
            mean_yt = (y_list[0] + y_list[1])/2.0
        else:
            # 取中間點的索引值
            idx = math.floor(len(x_list)/2)
            rotate_angle = calAngle(
                x_list[idx], y_list[idx], x_list[idx+1], y_list[idx+1])
            mean_xt = (x_list[idx] + x_list[idx+1])/2.0
            mean_yt = (y_list[idx] + y_list[idx+1])/2.0

        # 底下為微調管線文字在各角度的擺放座標
        # OK
        if rotate_angle >= 0 and rotate_angle <= 90:
            yt = mean_yt+4
            mean_xt += 3
        # OK
        elif rotate_angle >= 91 and rotate_angle <= 180:
            mean_xt -= 4
            yt = mean_yt
        # OK
        elif rotate_angle >= 181 and rotate_angle <= 270:
            yt = mean_yt+10
            mean_xt += 10
        # OK
        else:
            mean_xt += 2
            yt = mean_yt-4

        A, B, C = calArrow(
            item['COORDINATES'][idx], item['COORDINATES'][idx+1], item['FLOW'])
        msp.add_lwpolyline([C, A, B],
                           dxfattribs={'layer': 'ARROWS'})

        # 管線的所有屬性
        # [PIPES];ID,Node1,Node2,Length,Diameter,Roughness,MinorLoss,Flow,Velocity,Unit Headloss,Friction Factor,Reaction Rate,Quality,Status
        # msp.add_text(item['FLOW'], dxfattribs={
        #              'layer': 'FLOW', 'color': ezdxf.colors.RED}).set_pos((mean_xt, yt), align='TOP_CENTER')
        # msp.add_text(item['LENGTH'], dxfattribs={
        #              'layer': 'LENGTH', 'color': ezdxf.colors.RED}).set_pos((mean_xt, yt), align='TOP_CENTER')
        # msp.add_text(item['DIAMETER'], dxfattribs={
        #              'layer': 'DIAMETER', 'color': ezdxf.colors.RED}).set_pos((mean_xt, yt), align='TOP_CENTER')
        # msp.add_text(item['ROUGHNESS'], dxfattribs={
        #              'layer': 'ROUGHNESS', 'color': ezdxf.colors.RED}).set_pos((mean_xt, yt), align='TOP_CENTER')
        # msp.add_text(item['MINORLOSS'], dxfattribs={
        #              'layer': 'MINORLOSS', 'color': ezdxf.colors.RED}).set_pos((mean_xt, yt), align='TOP_CENTER')
        # msp.add_text(item['VELOCITY'], dxfattribs={
        #              'layer': 'VELOCITY', 'color': ezdxf.colors.RED}).set_pos((mean_xt, yt), align='TOP_CENTER')
        # msp.add_text(item['UNIT_HEADLOSS'], dxfattribs={
        #              'layer': 'UNIT_HEADLOSS', 'color': ezdxf.colors.RED}).set_pos((mean_xt, yt), align='TOP_CENTER')
        # msp.add_text(item['FRICTION_FACTOR'], dxfattribs={
        #              'layer': 'FRICTION_FACTOR', 'color': ezdxf.colors.RED}).set_pos((mean_xt, yt), align='TOP_CENTER')
        # msp.add_text(item['REACTION_RATE'], dxfattribs={
        #              'layer': 'REACTION_RATE', 'color': ezdxf.colors.RED}).set_pos((mean_xt, yt), align='TOP_CENTER')
        # msp.add_text(item['QUALITY'], dxfattribs={
        #              'layer': 'PIPE_QUALITY', 'color': ezdxf.colors.RED}).set_pos((mean_xt, yt), align='TOP_CENTER')
        msp.add_text(item['ID'], dxfattribs={
                     'layer': 'PIPE_ID', 'color': ezdxf.colors.RED}).set_pos((mean_xt+2, yt+2), align='TOP_CENTER')

        # 管線文字使用方式
        mtext = msp.add_mtext(
            "", dxfattribs={"style": "OpenSans", 'layer': 'PIPE', 'color': ezdxf.colors.BLUE}).set_location((mean_xt, yt), attachment_point=2)

        TLS = ""
        TRS = ""
        BLS = ""
        BRS = ""
        if w.Top_Left_Item.get() == "DIAMETER":
            # TLS = str(item[w.Top_Left_Item.get()])
            TLS = "Φ"+str(item[w.Top_Left_Item.get()])
        elif w.Top_Left_Item.get() == "STATUS":
            TLS = str(item[w.Bottom_Left_Item.get()])
        elif w.Top_Left_Item.get() == "FLOW":
            TLS = str(
                abs(round(float(item[w.Top_Left_Item.get()]), int(w.Digits.get()))))
        else:
            # TLS = str(round(float(item[w.Top_Left_Item.get()]), int(w.Digits.get())))
            try:
                TLS = str(round(float(item[w.Top_Left_Item.get()]), int(w.Digits.get())))
            except Exception as e:
                # print('Transfer Error',e)
                TLS = str(item[w.Top_Left_Item.get()])

        if w.Top_Right_Item.get() == "DIAMETER":
            TRS = "Φ"+str(item[w.Top_Right_Item.get()])
        elif w.Top_Right_Item.get() == "STATUS":
            TRS = str(item[w.Bottom_Left_Item.get()])
        elif w.Top_Right_Item.get() == "FLOW":
            TRS = str(
                abs(round(float(item[w.Top_Right_Item.get()]), int(w.Digits.get()))))
        else:
            # TRS = str(round(float(item[w.Top_Right_Item.get()]), int(w.Digits.get())))
            try:
                TRS = str(round(float(item[w.Top_Right_Item.get()]), int(w.Digits.get())))
            except Exception as e:
                # print('Transfer Error',e)
                TRS = str(item[w.Top_Right_Item.get()])

        if w.Bottom_Left_Item.get() == "DIAMETER":
            BLS = "Φ"+str(item[w.Bottom_Left_Item.get()])
        elif w.Bottom_Left_Item.get() == "STATUS":
            BLS = str(item[w.Bottom_Left_Item.get()])
        elif w.Bottom_Left_Item.get() == "FLOW":
            BLS = str(
                abs(round(float(item[w.Bottom_Left_Item.get()]), int(w.Digits.get()))))
        else:
            # BLS = str(round(float(item[w.Bottom_Left_Item.get()]), int(w.Digits.get())))
            try:
                BLS = str(round(float(item[w.Bottom_Left_Item.get()]), int(w.Digits.get())))
            except Exception as e:
                # print('Transfer Error',e)
                BLS = str(item[w.Bottom_Left_Item.get()])

        if w.Bottom_Right_Item.get() == "DIAMETER":
            BRS = "Φ"+str(item[w.Bottom_Right_Item.get()])
        elif w.Bottom_Right_Item.get() == "STATUS":
            BRS = str(item[w.Bottom_Right_Item.get()])
        elif w.Bottom_Right_Item.get() == "FLOW":
            BRS = str(
                abs(round(float(item[w.Bottom_Right_Item.get()]), int(w.Digits.get()))))
        else:
            try:
                BRS = str(round(float(item[w.Bottom_Right_Item.get()]), int(w.Digits.get())))
            except Exception as e:
                # print('Transfer Error',e)
                BRS = str(item[w.Bottom_Right_Item.get()])

        mtext.text = "\\A1;\\S"+TLS+"("+TRS+")^ "+BLS+"-"+BRS
        # print(mtext.text)

        # ref : https://ezdxf.readthedocs.io/en/stable/tutorials/mtext.html?highlight=mtext
        # mtext.text = "\\A1;\\S"+str(round(float(item['LENGTH']), 2))+"("+str(
        #     item['VELOCITY'])+")^ Φ"+str(item['DIAMETER'])+"-"+str(abs(float(item['FLOW'])))
        # print(mtext.text)
        # print(w.Top_Left_Item.get(), w.Top_Right_Item.get(),
        #   w.Bottom_Left_Item.get(), w.Bottom_Right_Item.get(), w.Digits.get())
        mtext.set_rotation(rotate_angle)

    # 產出dxf檔
    # doc.saveas('nodes.dxf')
    doc.saveas(dxf_file_path.name)
    messagebox.showinfo("提醒訊息", "匯出成功!!!")

# 載入node.txt


def loadFile_Node(node_file):
    print("----------------------------------")
    try:
        with open(node_file) as f:
            for line in f.readlines()[4:]:
                # print(line)
                records = line.replace("\n", "").split("\t")
                # is_researvation = 0
                # if records[0].strip().find('Resvr') > -1:
                #     is_researvation = 1
                Node_ID = records[0].strip().split(" ")[1]
                Elevation = records[1].strip()
                Base_Demand = records[2].strip()
                Initial_Quality = records[3].strip()
                Demand = records[4].strip()
                Head = records[5].strip()
                Pressure = records[6].strip()
                Quality = records[7].strip()
                # print(records[0], Node_ID, is_researvation)
                #       records[1].strip(), records[2].strip())
                if Node_ID in NODES:
                    NODES[Node_ID]['ID'] = Node_ID
                    NODES[Node_ID]['ELEV'] = Elevation
                    NODES[Node_ID]['BASE_DEMAND'] = Base_Demand
                    NODES[Node_ID]['INITIAL_QUALITY'] = Initial_Quality
                    NODES[Node_ID]['DEMAND'] = Demand
                    NODES[Node_ID]['HEAD'] = Head
                    NODES[Node_ID]['PRESSURE'] = Pressure
                    NODES[Node_ID]['QUALITY'] = Quality
                else:
                    NODES[Node_ID] = {'ID':Node_ID,
                        'ELEV': Elevation, 'BASE_DEMAND':Base_Demand,'INITIAL_QUALITY':Initial_Quality,'DEMAND': Demand, 'HEAD': Head, 'PRESSURE': Pressure, 'QUALITY': Quality, 'COORDINATES': COORDINATES[Node_ID]}
    except Exception as e:
        print("loadFile_Node Error:",e)

# 載入link.txt


def loadFile_Link(link_file):
    try:
        with open(link_file) as f:
            for line in f.readlines()[4:]:
                records = line.replace("\n", "").split("\t")
                Length = records[1].strip()
                Diameter = records[2].strip()
                Roughness = records[3].strip()
                Bulk_Coeff = records[4].strip()
                Wall_Coeff = records[5].strip()
                Flow = records[6].strip()
                Velocity = records[7].strip()
                Unit_Headloss = records[8].strip()
                Friction_Factor = records[9].strip()
                Reaction_Rate = records[10].strip()
                Quality = records[11].strip()
                Status = records[12].strip()
                    
                if records[0].find("Pipe")>-1:
                #         print(line)
                    Pipe_ID = records[0].strip().split(" ")[1]
                    # print(Pipe_ID,Flow,Velocity,Unit_Headloss,Friction_Factor,Reaction_Rate,Quality,Status)
                    if Pipe_ID in LINES:
                        # print(Pipe_ID,"in")
                        LINES[Pipe_ID]['ID'] = Pipe_ID
                        LINES[Pipe_ID]['LENGTH'] = Length
                        LINES[Pipe_ID]['DIAMETER'] = Diameter
                        LINES[Pipe_ID]['ROUGHNESS'] = Roughness
                        LINES[Pipe_ID]['BULK_COEFF'] = Bulk_Coeff
                        LINES[Pipe_ID]['WALL_COEFF'] = Wall_Coeff
                        LINES[Pipe_ID]['FLOW'] = Flow
                        LINES[Pipe_ID]['VELOCITY'] = Velocity
                        LINES[Pipe_ID]['UNIT_HEADLOSS'] = Unit_Headloss
                        LINES[Pipe_ID]['FRICTION_FACTOR'] = Friction_Factor
                        LINES[Pipe_ID]['REACTION_RATE'] = Reaction_Rate
                        LINES[Pipe_ID]['QUALITY'] = Quality
                        LINES[Pipe_ID]['STATUS'] = Status
                    else:
                        # print(Pipe_ID,"not in")
                        LINES[Pipe_ID] = {'ID':Pipe_ID,'LENGTH':Length,'DIAMETER': Diameter,'ROUGHNESS':Roughness,'BULK_COEFF':Bulk_Coeff,'WALL_COEFF':Wall_Coeff,'FLOW': Flow, 'VELOCITY': Velocity, 'UNIT_HEADLOSS': Unit_Headloss, 'FRICTION_FACTOR': Friction_Factor, 'REACTION_RATE': Reaction_Rate, 'QUALITY': Quality, 'STATUS': Status}
                    # print(LINES[Pipe_ID])
                if records[0].find("Pump")>-1:
                    # print("Pump")
                    PUMP_ID=records[0].strip().split(" ")[1]
                    if PUMP_ID in PUMPS:
                        # print(Pipe_ID,"in")
                        PUMPS[PUMP_ID]['ID'] = PUMP_ID
                        PUMPS[PUMP_ID]['LENGTH'] = Length
                        PUMPS[PUMP_ID]['DIAMETER'] = Diameter
                        PUMPS[PUMP_ID]['ROUGHNESS'] = Roughness
                        PUMPS[PUMP_ID]['BULK_COEFF'] = Bulk_Coeff
                        PUMPS[PUMP_ID]['WALL_COEFF'] = Wall_Coeff
                        PUMPS[PUMP_ID]['FLOW'] = Flow
                        PUMPS[PUMP_ID]['VELOCITY'] = Velocity
                        PUMPS[PUMP_ID]['UNIT_HEADLOSS'] = Unit_Headloss
                        PUMPS[PUMP_ID]['FRICTION_FACTOR'] = Friction_Factor
                        PUMPS[PUMP_ID]['REACTION_RATE'] = Reaction_Rate
                        PUMPS[PUMP_ID]['QUALITY'] = Quality
                        PUMPS[PUMP_ID]['STATUS'] = Status
                    else:
                        # print(Pipe_ID,"not in")
                        PUMPS[PUMP_ID] = {'ID':PUMP_ID,'LENGTH':Length,'DIAMETER': Diameter,'ROUGHNESS':Roughness,'BULK_COEFF':Bulk_Coeff,'WALL_COEFF':Wall_Coeff,'FLOW': Flow, 'VELOCITY': Velocity, 'UNIT_HEADLOSS': Unit_Headloss, 'FRICTION_FACTOR': Friction_Factor, 'REACTION_RATE': Reaction_Rate, 'QUALITY': Quality, 'STATUS': Status}
                    
                if records[0].find("Valve")>-1:
                    # print("Valve")
                    VALVE_ID=records[0].strip().split(" ")[1]
                    if VALVE_ID in VALVES:
                        # print(Pipe_ID,"in")
                        VALVES[VALVE_ID]['ID'] = VALVE_ID
                        VALVES[VALVE_ID]['LENGTH'] = Length
                        VALVES[VALVE_ID]['DIAMETER'] = Diameter
                        VALVES[VALVE_ID]['ROUGHNESS'] = Roughness
                        VALVES[VALVE_ID]['BULK_COEFF'] = Bulk_Coeff
                        VALVES[VALVE_ID]['WALL_COEFF'] = Wall_Coeff
                        VALVES[VALVE_ID]['FLOW'] = Flow
                        VALVES[VALVE_ID]['VELOCITY'] = Velocity
                        VALVES[VALVE_ID]['UNIT_HEADLOSS'] = Unit_Headloss
                        VALVES[VALVE_ID]['FRICTION_FACTOR'] = Friction_Factor
                        VALVES[VALVE_ID]['REACTION_RATE'] = Reaction_Rate
                        VALVES[VALVE_ID]['QUALITY'] = Quality
                        VALVES[VALVE_ID]['STATUS'] = Status
                    else:
                        # print(Pipe_ID,"not in")
                        VALVES[VALVE_ID] = {'ID':VALVE_ID,'LENGTH':Length,'DIAMETER': Diameter,'ROUGHNESS':Roughness,'BULK_COEFF':Bulk_Coeff,'WALL_COEFF':Wall_Coeff,'FLOW': Flow, 'VELOCITY': Velocity, 'UNIT_HEADLOSS': Unit_Headloss, 'FRICTION_FACTOR': Friction_Factor, 'REACTION_RATE': Reaction_Rate, 'QUALITY': Quality, 'STATUS': Status}
    except Exception as e:
        print("loadFile_Link Error",e)

# 計算管線文字旋轉角度


def calAngle(x1, y1, x2, y2):
    angle = 0.0
    dx = x2-x1
    dy = y2-y1
    angle = math.atan2(dy, dx)
    rotate = round(math.degrees(angle))
    return rotate

# 給p1,p2兩點座標及flow數值，回傳畫箭頭符號的座標


def calArrow(p1, p2, flow):
    # print(p1, p2, flow)
    angle_delta = 30
    angle_c = 0
    angle_b = 0
    angle_a = 0.0
    angle = 0.0

    x1 = p1[0]
    y1 = p1[1]
    x2 = p2[0]
    y2 = p2[1]

    # 要以線段中間來畫圖和計算
    dx = (x2-x1)/2
    dy = (y2-y1)/2
    angle = math.atan2(dy, dx)
    angle_a = round(math.degrees(angle))
    # distance = math.sqrt((dx*dx+dy*dy))

    if angle_a-angle_delta < 0:
        angle_c = angle_a-angle_delta+360
    else:
        angle_c = angle_a-angle_delta
    if angle_c > 360:
        angle_c -= 360

    if angle_a+angle_delta > 360:
        angle_b = angle_a-360+angle_delta
    else:
        angle_b = angle_a+angle_delta

    # print("angle_a", angle_a, "angle_b", angle_b, "angle_c", angle_c)
    # 兩側箭頭長度
    dist_diff = 10
    if float(flow) < 0:
        A = ((x1), (y1))
        B = (A[0]+(dist_diff)*math.cos(math.radians(angle_b)),
             A[1]+(dist_diff)*math.sin(math.radians(angle_b)))

        C = (A[0]+(dist_diff)*math.cos(math.radians(angle_c)),
             A[1]+(dist_diff)*math.sin(math.radians(angle_c)))
    else:
        A = ((x2), (y2))
        B = (A[0]-(dist_diff)*math.cos(math.radians(angle_b)),
             A[1]-(dist_diff)*math.sin(math.radians(angle_b)))

        C = (A[0]-(dist_diff)*math.cos(math.radians(angle_c)),
             A[1]-(dist_diff)*math.sin(math.radians(angle_c)))
    return A, B, C


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == '__main__':
    import ExportDXF
    ExportDXF.vp_start_gui()

# LINES={}
# LINES['04-0202P-119'] = {'ID':'2222'}
# print(LINES['04-0202P-119'])

# mm=['5', 'N-7', '04-0202N-123', 'POWER', '0.01', ';']
# i=mm.index("POWER")
# print(mm)
# print(i)

# x=[20.4,10.2]
# print(sum(x)/len(x))
